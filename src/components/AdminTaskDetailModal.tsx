import React, { useState } from 'react';
import { Task, addTaskComment, updateTask } from '../services/taskService';
import { useAuth } from '../contexts/AuthContext';
import RevisionModal from './RevisionModal';

interface AdminTaskDetailModalProps {
  task: Task;
  onClose: () => void;
  onUpdateStatus?: (taskId: string, newStatus: Task['status']) => Promise<Task>;
}

const AdminTaskDetailModal: React.FC<AdminTaskDetailModalProps> = ({ 
  task: initialTask, 
  onClose,
  onUpdateStatus 
}) => {
  const { currentUser } = useAuth();
  const [task, setTask] = useState(initialTask);
  const [isUpdating, setIsUpdating] = useState(false);
  const [isRevisionModalOpen, setIsRevisionModalOpen] = useState(false);

  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(date);
  };

  const handleCompleteTask = async () => {
    if (!task) return;

    try {
      const updatedTask = await onUpdateStatus?.(task.id, 'completed');
      if (updatedTask) {
        setTask(updatedTask);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
        const commentText = '–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
        const commentedTask = await addTaskComment(task.id, {
          text: commentText,
          author: {
            email: currentUser?.email || '',
            company: task.author?.company || ''
          }
        });

        setTask(commentedTask);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
    }
  };

  const handleRevisionSubmit = async (text: string) => {
    if (!task) return;

    try {
      const updatedTask = await onUpdateStatus?.(task.id, 'in-progress');
      if (updatedTask) {
        setTask(updatedTask);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É
        const commentText = `–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É\n\n${text}`;
        const commentedTask = await addTaskComment(task.id, {
          text: commentText,
          author: {
            email: currentUser?.email || '',
            company: task.author?.company || ''
          }
        });

        setTask(commentedTask);
        setIsRevisionModalOpen(false);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É:', error);
    }
  };

  return (
    <>
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
        <div className="bg-white rounded-lg shadow-xl w-full max-w-lg">
          <div className="p-6">
            <div className="mb-6">
              <h2 className="text-2xl font-bold mb-4">{task.title}</h2>
              <p className="text-gray-600">{task.description}</p>
            </div>

            <div className="grid grid-cols-2 gap-4 mb-6">
              <div>
                <h3 className="font-medium text-gray-700">–°–æ–∑–¥–∞–Ω–æ:</h3>
                <p className="text-gray-600">{formatDate(task.createdAt)}</p>
              </div>
              <div>
                <h3 className="font-medium text-gray-700">–î–µ–¥–ª–∞–π–Ω:</h3>
                <p className="text-gray-600">{formatDate(task.deadline)}</p>
              </div>
            </div>

            <div className="mb-6">
              <h3 className="font-medium text-gray-700 mb-2">–°—Ç–∞—Ç—É—Å:</h3>
              <select
                value={task.status}
                onChange={async (e) => {
                  const newStatus = e.target.value as Task['status'];
                  const updatedTask = await onUpdateStatus?.(task.id, newStatus);
                  if (updatedTask) {
                    setTask(updatedTask);
                    const statusText = {
                      pending: '–í –æ–∂–∏–¥–∞–Ω–∏–∏',
                      'in-progress': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
                      'design-review': '–î–∏–∑–∞–π–Ω-—Ä–µ–≤—å—é',
                      'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
                    };
                    const commentText = `–ò–∑–º–µ–Ω—ë–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —Å "${statusText[task.status]}" –Ω–∞ "${statusText[newStatus]}"`;
                    const commentedTask = await addTaskComment(task.id, {
                      text: commentText,
                      author: {
                        email: currentUser?.email || '',
                        company: task.author?.company || ''
                      }
                    });
                    setTask(commentedTask);
                  }
                }}
                className="p-2 border border-gray-300 rounded-lg w-full"
              >
                <option value="pending">–í –æ–∂–∏–¥–∞–Ω–∏–∏</option>
                <option value="in-progress">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</option>
                <option value="design-review">–î–∏–∑–∞–π–Ω-—Ä–µ–≤—å—é</option>
                <option value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</option>
              </select>
            </div>

            {task.attachments && task.attachments.length > 0 && (
              <div className="mb-6">
                <h3 className="font-medium text-gray-700 mb-2">–í–ª–æ–∂–µ–Ω–∏—è:</h3>
                <div className="space-y-2">
                  {task.attachments.map((attachment, index) => (
                    <div key={index} className="flex items-center space-x-2">
                      <span>{attachment.type === 'file' ? 'üìé' : 'üîó'}</span>
                      <a
                        href={attachment.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-blue-600 hover:underline"
                      >
                        {attachment.name}
                      </a>
                    </div>
                  ))}
                </div>
              </div>
            )}

            <div className="mb-6">
              <h3 className="font-medium text-gray-700 mb-2">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</h3>
              <div className="space-y-4">
                {task.comments?.slice().reverse().map((comment, index) => (
                  <div key={index} className="bg-gray-50 p-4 rounded-lg">
                    <div className="flex justify-between items-start mb-2">
                      <div className="text-sm text-gray-500">
                        <span className="font-medium">
                          {comment.author.email === 'efeop1@gmail.com' ? 'Admin' : comment.author.email}
                        </span>
                        <span className="mx-2">¬∑</span>
                        <span>{comment.author.company}</span>
                      </div>
                      <span className="text-sm text-gray-500">
                        {formatDate(comment.createdAt)}
                      </span>
                    </div>
                    <p className={`whitespace-pre-wrap ${
                      comment.text.startsWith('–ò–∑–º–µ–Ω—ë–Ω —Å—Ç–∞—Ç—É—Å') ? 'text-blue-600' :
                      comment.text.startsWith('–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞') ? 'text-green-600' :
                      comment.text.startsWith('–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É') ? 'text-red-600' :
                      comment.text.startsWith('–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–∏–∑–∞–π–Ω-—Ä–µ–≤—å—é') ? 'text-purple-600' :
                      'text-gray-700'
                    }`}>{comment.text}</p>
                  </div>
                ))}
                {(!task.comments || task.comments.length === 0) && (
                  <p className="text-gray-500 text-center py-4">–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</p>
                )}
              </div>
            </div>

            <div className="flex justify-end">
              <button
                onClick={onClose}
                className="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300"
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          </div>
        </div>
      </div>

      {isRevisionModalOpen && (
        <RevisionModal
          onClose={() => setIsRevisionModalOpen(false)}
          onSubmit={handleRevisionSubmit}
        />
      )}
    </>
  );
};

export default AdminTaskDetailModal;
